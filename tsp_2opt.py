import math


def tsp(route):

    path = [i[2] for i in route]
    best_distance = route_distance(route)
    temp = 1000000

    while best_distance < temp:
        temp = best_distance
        for i in range(len(route)-1):
            for j in range(len(route)):
                new_route = two_opt_swap(route, i, j)
                distance = route_distance(new_route)
                if distance < best_distance:
                    best_distance = distance
                    route = new_route
                    path = two_opt_swap(path, i , j)
        print(best_distance)
    path.append(path[0])

    return best_distance, path


def two_opt_swap(route, i, j):
    new_a = route[:i]
    new_b = list(reversed(route[i:j]))
    new_c = route[j:]
    return new_a + new_b + new_c


def route_distance(route):
    d = 0
    for i in range(len(route)-1):
        d += distance(route[i], route[i+1])
    d += distance(route[len(route)-1], route[0])
    return d


def distance(city_a, city_b):
    return math.sqrt((city_b[0] - city_a[0]) ** 2 + (city_b[1] - city_a[1]) ** 2)


def add_index(data):
    for index in range(len(data)):
        data[index].append(index)


def description():
    return "Реалізовано метод \"найближчого сусіда\" для початкового вибору маршруту. " \
           "Далі для покращення результату використовується 2-opt алгоритм до того " \
           "моменту, поки результат більше не можна покращити.\n" \
           "\n" \
           "Метод \"найближчого сусіда\": для пошуку шляху обраховується відстань від початкової точки " \
           "до кожної іншої. Ми переходимо до точки, відстань до якої найменша і " \
           "приймаємо цю точку за початкову. Так проходиться весь шлях. В кінці ми повертаємось " \
           "до першої точки.\n" \
           "Для покращення результату алгоритму за початкову точку беремо всі міста з масиву по черзі " \
           "і знаходимо найкоротший шлях.\n" \
           "2-opt алгоритм: якщо подивитись на візуалізацію роботи цього алгоритму на графі, то побачимо, " \
           "що беруться два ребра за раз (ті, які перетинаються) і міняються місцями. Якщо зміна " \
           "покращила шлях, то беруться інша ребра, а якщо ні - то вертаються назад.\n" \
           "Для покращення результату алгоритму 2-opt використовуємо цикл while поки " \
           "результат не перестане покращуватись.\n" \
           "Хоча використання усіх наведених алгоритмів покращує отриманий результат, " \
           "в певних ситуаціях доцільно використовувати лише метод \"найближчого сусіда\", " \
           "адже він дає \"good enough\" результат за набагато менший час."


data = [[252, 1240, 17], [274, 1420, 23], [298, 1513, 37], [198, 1632, 103], [91, 1732, 101], [53, 1657, 110], [198, 1810, 98], [463, 1670, 35], [611, 1384, 83], [738, 1325, 9], [872, 1559, 71], [928, 1700, 20], [929, 1766, 73], [920, 1835, 140], [890, 1846, 58], [739, 1850, 126], [1234, 1946, 16], [1247, 1945, 14], [1251, 1832, 10], [1424, 1728, 31], [1513, 1646, 108], [1625, 1651, 90], [1724, 1642, 97], [1807, 1711, 22], [1621, 1830, 44], [1393, 1368, 46], [1689, 1223, 130], [1787, 1009, 92], [1795, 962, 27], [1806, 733, 104], [1741, 712, 141], [1754, 559, 147], [1917, 687, 66], [2186, 766, 107], [2097, 981, 57], [2421, 1007, 60], [2574, 946, 24], [2599, 901, 80], [2503, 1172, 124], [2482, 1183, 50], [2586, 1286, 86], [2609, 1286, 144], [2716, 1432, 8], [2721, 1482, 6], [2790, 1457, 116], [2628, 1479, 56], [2576, 1676, 19], [2728, 1698, 11], [2678, 1825, 26], [2597, 1830, 85], [2573, 1969, 34], [2445, 1820, 149], [2290, 1810, 61], [2139, 1806, 59], [2178, 1619, 76], [2143, 1611, 109], [2916, 1724, 148], [2945, 1622, 54], [2961, 1605, 82], [3085, 1528, 33], [3029, 1242, 134], [2849, 1214, 139], [3113, 885, 84], [2991, 792, 67], [2863, 558, 72], [3022, 474, 49], [2936, 337, 43], [2823, 376, 113], [2753, 283, 143], [2588, 302, 63], [2542, 236, 39], [2519, 135, 53], [2848, 96, 1], [3232, 324, 115], [3416, 143, 81], [3527, 41, 125], [3640, 43, 94], [3815, 169, 12], [3913, 192, 32], [3941, 258, 145], [3972, 329, 102], [3893, 102, 75], [3875, 598, 36], [3888, 666, 4], [3822, 899, 77], [3854, 923, 51], [3756, 882, 95], [3479, 821, 38], [3477, 949, 100], [3502, 1067, 120], [3520, 1079, 29], [3430, 1088, 106], [3404, 1307, 111], [3468, 1404, 131], [3384, 1498, 28], [3373, 1646, 45], [3510, 1671, 2], [3646, 1758, 135], [3447, 1830, 42], [3326, 1846, 122], [3104, 1931, 114], [3083, 1938, 119], [3548, 1999, 127], [3955, 1743, 40], [3911, 1673, 70], [3950, 1558, 99], [3874, 1318, 47], [3683, 1533, 13], [3613, 523, 146], [2573, 599, 68], [1782, 93, 137], [1628, 253, 132], [1429, 134, 88], [1323, 280, 41], [1280, 237, 121], [1178, 100, 79], [1256, 61, 30], [1067, 371, 138], [953, 268, 55], [876, 220, 142], [741, 146, 118], [776, 392, 96], [839, 620, 74], [611, 673, 18], [376, 825, 52], [382, 872, 133], [378, 1048, 78], [285, 1029, 136], [161, 906, 87], [123, 862, 15], [53, 857, 21], [22, 987, 93], [19, 674, 69], [241, 341, 65], [327, 265, 64], [457, 334, 3], [374, 9, 117], [217, 38, 123], [178, 24, 25], [48, 154, 128], [538, 1023, 105], [742, 1025, 89], [938, 955, 48], [984, 965, 5], [1115, 1052, 62], [1380, 939, 0], [1419, 872, 129], [1187, 706, 91], [1286, 525, 7], [1034, 1344, 112]]
print(tsp(data))
